generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model alat {
  id_alat    Int       @id @db.UnsignedInt
  uuid       String    @db.VarChar(255)
  nama       String    @db.VarChar(255)
  latitude   Decimal   @db.Decimal(10, 6)
  longitude  Decimal   @db.Decimal(10, 6)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model blog {
  id_blog     BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  judul_blog  String    @db.VarChar(150)
  thumbnail   String    @db.Text
  deskripsi   String    @db.Text
  id_kategori BigInt    @db.UnsignedBigInt
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  kategori    kategori  @relation(fields: [id_kategori], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "blog_id_kategori_foreign")

  @@index([id_kategori], map: "blog_id_kategori_foreign")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model humidity {
  id                          BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  nilai_humidity              Decimal                       @db.Decimal(5, 2)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  non_round_robin_monitorings non_round_robin_monitorings[]
  round_robin_monitorings     round_robin_monitorings[]
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model kategori {
  id            BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  nama_kategori String    @db.VarChar(20)
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  blog          blog[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model riwayat_aqi {
  id         BigInt             @id @default(autoincrement()) @db.UnsignedBigInt
  nilai      Decimal            @db.Decimal(8, 2)
  status     riwayat_aqi_status
  created_at DateTime?          @db.Timestamp(0)
  updated_at DateTime?          @db.Timestamp(0)
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model speeds {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  speed      Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  deleted_at DateTime? @db.Timestamp(0)
}

model temperature {
  id                          BigInt                        @id @default(autoincrement()) @db.UnsignedBigInt
  nilai_temperature           Decimal                       @db.Decimal(5, 2)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  non_round_robin_monitorings non_round_robin_monitorings[]
  round_robin_monitorings     round_robin_monitorings[]
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String    @db.VarChar(255)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  address           String    @default("alamat") @db.VarChar(255)
  role              String    @default("karyawan") @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model kategories {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model kategoris {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model monitoring_result_round_robins {
  id                          BigInt                                @id @default(autoincrement()) @db.UnsignedBigInt
  name_process                String?                               @db.VarChar(255)
  method                      monitoring_result_round_robins_method @default(Round_Robin)
  burst_time                  Int?
  waiting_time                Int?
  turn_around_time            Int?
  created_at                  DateTime?                             @db.Timestamp(0)
  updated_at                  DateTime?                             @db.Timestamp(0)
  non_round_robin_monitorings non_round_robin_monitorings[]
  round_robin_monitorings     round_robin_monitorings[]
}

model non_round_robin_monitorings {
  id                             BigInt                         @id @default(autoincrement()) @db.UnsignedBigInt
  id_monitoring                  BigInt                         @db.UnsignedBigInt
  id_temperature                 BigInt                         @db.UnsignedBigInt
  id_humidity                    BigInt                         @db.UnsignedBigInt
  waiting_time                   Int
  turn_around_time               Int
  created_at                     DateTime?                      @db.Timestamp(0)
  updated_at                     DateTime?                      @db.Timestamp(0)
  humidity                       humidity                       @relation(fields: [id_humidity], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "non_round_robin_monitorings_id_humidity_foreign")
  monitoring_result_round_robins monitoring_result_round_robins @relation(fields: [id_monitoring], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "non_round_robin_monitorings_id_monitoring_foreign")
  temperature                    temperature                    @relation(fields: [id_temperature], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "non_round_robin_monitorings_id_temperature_foreign")

  @@index([id_humidity], map: "non_round_robin_monitorings_id_humidity_foreign")
  @@index([id_monitoring], map: "non_round_robin_monitorings_id_monitoring_foreign")
  @@index([id_temperature], map: "non_round_robin_monitorings_id_temperature_foreign")
}

model round_robin_monitorings {
  id                             BigInt                         @id @default(autoincrement()) @db.UnsignedBigInt
  id_monitoring                  BigInt                         @db.UnsignedBigInt
  id_temperature                 BigInt                         @db.UnsignedBigInt
  id_humidity                    BigInt                         @db.UnsignedBigInt
  waiting_time                   Int
  turn_around_time               Int
  created_at                     DateTime?                      @db.Timestamp(0)
  updated_at                     DateTime?                      @db.Timestamp(0)
  humidity                       humidity                       @relation(fields: [id_humidity], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "round_robin_monitorings_id_humidity_foreign")
  monitoring_result_round_robins monitoring_result_round_robins @relation(fields: [id_monitoring], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "round_robin_monitorings_id_monitoring_foreign")
  temperature                    temperature                    @relation(fields: [id_temperature], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "round_robin_monitorings_id_temperature_foreign")

  @@index([id_humidity], map: "round_robin_monitorings_id_humidity_foreign")
  @@index([id_monitoring], map: "round_robin_monitorings_id_monitoring_foreign")
  @@index([id_temperature], map: "round_robin_monitorings_id_temperature_foreign")
}

enum riwayat_aqi_status {
  baik
  buruk
}

enum monitoring_result_round_robins_method {
  Round_Robin     @map("Round Robin")
  Non_Round_Robin @map("Non Round Robin")
}
